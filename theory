Flask is what’s known as a WSGI framework. It's pronounced “whiskey” and it stands for ​​Web Server Gateway Interface. 
Basically, it's a way for web servers to pass requests to web applications or frameworks. 
Flask relies on the WSGI external library to function, as well as the Jinja2 template engine.

You can use Flask to develop a customized web server from scratch.

To install Flask on pycharm follow this method: https://medium.com/@mushtaque87/flask-in-pycharm-community-edition-c0f68400d91e

IMPORT FLASK

To import flask, do the following

from flask import Flask # Imports the flask library

START FLASK APPLICATION

This line of code initializes a Flask application. 
The Flask(__name__) line creates an instance of the Flask class, with 
  __name__ representing the name of the current Python module. 
This instance is the core of your web application, which you can use to 
define routes, handle HTTP requests, render templates, and more.

The __name__ argument is a special Python variable that represents the name of the current module. 

app = Flask(__name__) # Starts the Flask application. The 'app' variable is very important. We'll be using that later.

ROUTE DECORATOR/URL PATH

You can use a route decorator to map a specific URL path to a function in your application.

When an user access a route, the function inside it will be executed.

@app.route('/') # Tells the code what to do if we've gone to our web address with just a / after the URL

def index(): # Tells the code which webpage to show. This subroutine will display a "Hello world!" string
    return 'Hello world!'

@@app.route('/home') # Creates the path to the home page
def home(): # Subroutine to create the home page
  # Three quotes followed by the html for your website. Three more quotes to close. All the HTML is assigned to the 'page' variable
  page = """
<html>
  <head>
    <title>Home page</title>
  </head>
  <body>
    <p>Welcome to the Home page!</p>
  </body>
</html>
"""
  return page # returns the contents of the page variable

STATIC FOLDER

You can create a "folder" or url path by adding a new property to the app = Flask line of code:

app = Flask(__name__, static_url_path="/static")

The static_url_path="/static" parameter sets the URL path where Flask will look for static files such as
  images, CSS files, or JavaScript files. 
In this case, it's set to "/static", so any static files within the application would be accessed via URLs 
  starting with "/static". 
For example, if you have a file named "style.css" in the static folder, it would be accessible 
  at "/static/style.css" when the Flask app is running.

Once you've done that, you can access files inside static in your HTML like this:

<img src="static/images/picard.jpg" width = 30%>

END FLASK FILE

This line of code starts running your Flask application. 
  The run() function is a method provided by Flask that actually starts the development server so that your 
  web application can be accessed and interacted with.

The host='0.0.0.0' parameter specifies that the server will listen on all public IP addresses available on 
  the machine. 

port=81 sets the port number to 81, which means your Flask application will be accessible through port 81 on your machine.

So, when you execute this line of code, your Flask web application starts running, allowing users to 
  access it through a web browser using the specified IP address and port number.

app.run(host='0.0.0.0', port=81) # This line should ALWAYS come last. It's the line that turns on the Flask server.

FSTRINGS WITH FLASK AND REPLACE()

To make a fString inside a Flask file, format the HTML like fString and add the variable in curly braces.

from flask import Flask

import datetime # import the datetime library

app = Flask(__name__, static_url_path="/static")

@app.route('/')
def index():
    return 'Hello from Flask!'

@app.route('/home') 
def home():
  today = datetime.date.today() # Get today's date
  page = f"""html 
  # Format the html as an fString
  <html>
    <head>
      <title>{today}</title>
    </head>
    <body>
    </body>
  </html>"""

You can also use .replace() to replace the text inside your page when the value of a variable:

@app.route('/')
def index():
  myName = "Teresa"
  page = ""
  f = open("template/portfolio.html", "r")
  page = f.read()
  f.close()
  page = page.replace("{name}", myName) # Replace all instances of {name} with the contents of the 'myName' variable
  
  return page

LINKING WITH FLASK

from flask import Flask
import datetime # import the datetime library
app = Flask(__name__, static_url_path="/static")
@app.route('/')
def index():
  page = f"""<html><body>
  <p><a href = "/home">Go home</a></p>
  </body>
  </html>"""
  
  return page

RENDERING HTML TEMPLATES IN FLASK FILES

Pasting the html of your page in the flask file gets tedious (and long) soon.

To avoid that, you can use templates instead.

First, create a folder inside your server. Then, create an html file with your html code and put it in that folder.

Then put that html code in the corresponding function inside your flask file, like this:

@app.route('/')
def index():
  page = "" # Empty variable
  f = open("template/portfolio.html", "r")
  page = f.read()
  f.close()
  return page

HTML TEMPLATES AND REPLACE()

You can use fstrings and .replace() to make webpages out of a template:

@app.route('/portfolio')
def portfolio():
  myName = "Teresa"
  title = "Teresa's portfolio"
  text = "A portfolio is a great way to showcase your skills."
  image = "portfolio.png"
  link = "/home"
  
  page = ""
  f = open("template/portfolio.html", "r")
  page = f.read()
  f.close()
  page.replace("{name}", myName)
  page.replace("{title}", title)
  page.replace("{text}", text)
  page.replace("{image}", image)
  page.replace("{link}", link)
  return page

REDIRECTING

Redirecting is useful when you want to send a user to another web address, but that address is really long.

To do so, import the library 'redirect'.

from flask import Flask, redirect

Now I'll add an app route. In this example, I want to redirect users to my page for Day 77. 
All I put in the subroutine is a return redirect("") with the URL in the quotes.

from flask import Flask, redirect
@app.route('/77')
def seventySeven():
  return redirect("https://replit.com/@DavidAtReplit/Day-077-Solution#main.py")
  
  return page # This statement is not reachable or executed because it's after return redirect

FORMS 

For a form to work in a flask file, you need to add two things to the <form> html tag:

- A 'post' method: it packages the data in the form and sends it to the web server. 
- An 'action', which specifies where to send the data

<form method = "post" action = "/process">
    
</form>

Inside the form, we'll use the <input> tag to get the user's name. 
Input tags have several types that specify the sort of data they will collect. 
In this one, we'll use text. Every input tag must be given an identifier by setting the name property inside the tag.

Next up, we need a 'submit' button.

<form method = "post" action = "/process">
    <label for="nameContact">Name:</label>
    <input id="nameContact" type="Text" name="nameContactForm"><br>
    <select>
        <label for="favoriteFood">Favorite food:</label>
            <option value="tacos">Tacos</option>
            <option value="pizza">Pizza</option>
            <option value="pasta">Pasta</option>
            <option value="broccoli">Broccoli</option>
    </select>
    <input id="submitForm" type="submit" for="submitForm" style="background-color:#ffca3a; border:none; border-radius: 5px" onclick="alert('¡Enviado!')">
</form>

To make this work in flask, we have to do the following:

from flask import Flask, request

@app.route('/process', methods=["POST"])
def process():
  return request.form

The 'request' library handles incoming HTTP requests.

An HTTP request is a message sent by a client (usually a web browser) to a server, requesting some action to be 
performed. The server processes the request and sends back a response.

When a client sends a request to a Flask application, the details of that request (such as the HTTP method used, the headers, the 
form data, query parameters, etc.) are encapsulated in the request object. Developers can then use this object to access and 
work with the data sent by the client.

@app.route('/process', methods=["POST"]). This specifies that the following function (process) should be called when a POST 
request is made to the '/process' endpoint.

def process():. This function returns the data received in the form of request.form.

This code will get us the data from the form in a dictionary format, like this:

{"nameContact": "Teresa"}

You can add more things to the process() subroutine, for example:

def process():
  page = ""
  form = request.form
  if form["favoriteFood"] != "broccoli":
    page += f"Sounds delicious, {form['nameContact']}"
  else:
    page += f"Ewww, your taste is terrible, {form['username']}!"
  return page

